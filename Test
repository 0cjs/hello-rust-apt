#!/usr/bin/env bash
set -Eeuo pipefail
trap '
    ec=$?
    #   Becuase of the way we quote this section, and this comment, the actual
    #   line number of a failure is 4 less than what Bash says it is.
    echo 1>&2 "INTERNAL ERROR: ec=$ec line=$(($LINENO-4))"
    echo 1>&2 "    file=$0"
    echo 1>&2 "    cmd=$BASH_COMMAND"
    exit $ec;
' ERR

elapsed_start=$(date +%s)

####################################################################
#   Utility functions

die()  { ec="$1"; shift; echo 1>&2 "ERROR ($ec):" "$@"; exit $ec; }
fail() { ec=$?; echo "FAILED exitcode=$ec ($(elapsed)s)"; exit $ec; }
elapsed() { echo $(( $(date +%s) - $elapsed_start )); }

setup_docker() {
    declare -g docker=docker
    if ! $docker --version; then
        die "Cannot run '$docker' command. Check path?"
    elif ! $docker info >/dev/null 2>&1; then
        docker='sudo docker'
        #   We do not use `sudo -v` here: in common configurations that
        #   may require a password even when `sudo any-command` doesn't.
        sudo -p 'sudo pw for %u@%h to run docker: ' \
            docker --version >/dev/null 2>&1 \
            || die 3 "Cannot sudo to run '$docker'; start proxy?"
    fi
}

####################################################################
#   Build/run functions

docker_build_run() {
    declare -g quiet image_prefix
    local suffix="$1"; shift
    #   This optional function (or command) will, if given, be called
    #   during the creation of the context to add whatever extra things
    #   you need for it. CWD will be set to the context being built and
    #   the usual variables ($PROJDIR etc.) are available.
    local build_extra_context=true
    [[ $# -gt 0 ]] && { build_extra_context="$1"; shift; }
    local btag="$image_prefix-$suffix"

    #   A non-root user is created in the container; we make it the same
    #   UID and name as the builder running this script so that we can
    #   share files using bind mounts. (XXX This assumes that the builder
    #   also owns the files in this working copy of the repo.)
    local USER_ID="$(id -u)"
    local USER_NAME="$(id -u -n)"

    #   Create the Docker context we will use for this build.
    local dcontext=".build/docker/$btag"
    echo "----- Building Docker context $dcontext"
    #   The context is quick to rebuild, so we do a clean build of it
    #   every time rather than try to deal with updating it.
    rm -rf "$dcontext"
    mkdir -p "$(dirname "$dcontext")"
    cp -r docker/ "$dcontext"
    (   cd "$dcontext"
        m4 -E -E -I dfparts/ dfspec/$suffix > Dockerfile
        $build_extra_context
    ) || fail "Failed to build context"

    #   We assume that if the user is running Test, they want to rebuild
    #   the image (if necessary) and run a fresh container from it. This
    #   will destroy any existing sessions in the old container, ensuring
    #   we're starting clean.
    $docker container rm -f "$btag" >/dev/null 2>&1 || true

    echo "----- Building image $btag"
    $docker buildx build ${clean_big:+--no-cache=true} \
        $quiet ${loud:+--progress=plain} \
        --build-arg=image_prefix="$image_prefix" \
        --build-arg=USER_UID="$USER_ID" --build-arg=USER_NAME="$USER_NAME" \
        --tag "$btag" "$dcontext"

    #   Make this container "persistent" by starting a background process
    #   that will simply continue running for a few hours; log in with
    #   `dent` or `docker exec`. (When the sleep expires, the developer can
    #   just re-run `Test` to start it again.)
    #
    #   Configuration notes:
    #   • We mount this entire repo read/write into the home dir of the
    #     user so we can build whatever parts of it we need. Note that
    #     this is _not_ the build done by the build container, but
    #     completely independent.
    echo "----- Running container $btag"
    $docker run --name "$btag" \
        --rm=false --detach=true --tty=false \
        -v "$PROJDIR:/home/$USER_NAME/$(basename "$PROJDIR"):rw" \
        "$btag" /bin/sleep $((6*3600)) \
        >/dev/null  # We don't need to display the container ID.
}


####################################################################
#   Argument handling and setup

export PROJDIR=$(command cd "$(dirname "$0")" && pwd -P)
command cd "$PROJDIR"   # Makes life easier until we need to use file args.

clean_big=
clean_small=
quiet=-q
loud=
#   $image_prefix includes the user name $USER to avoid colliding with
#   other devs on the same development host, and `hra` to avoid colliding
#   with other projects on the same host and make it more obvious where the
#   images and containers are from.
image_prefix="$USER-hra"    # override with -i

while [[ ${#@} -gt 0 ]]; do case "$1" in
    -C)     shift; clean_big=true; rm -rf ".build/";;
    -c)     shift; clean_small=true; rm -rf .build/{cargo,docker,virtualenv};;
    -i)     shift; image_prefix="$1"; shift;;
    -v)     shift; quiet='';;
    -V)     shift; quiet=''; loud=true;;
    --)     shift; break;;                  # remainder are ??? args?
    *)      break;;                         # guessing remainder are for pytest
esac; done
[[ $# -eq 0 ]] || die 2 "Invalid arg: $1"

setup_docker

####################################################################
#   Build and test

source "$PROJDIR/pactivate" -q      # make `dent` available

context_webhello_src() {
    #   We want _just_ the source for the server, so that we don't need
    #   to rebuild the layer that builds that source if other parts of
    #   this repo have changed.
    tar -C "$PROJDIR" -czf webhello.tar.gz \
        docker/rustup-env package/ \
        webhello/
}
docker_build_run build context_webhello_src
#   We now have a container with the following in the user's home dir:
#   • image-build/: the build done in the image build
#   • hello-rust-apt/: completely separate bind mount of the project
#   You may build and play with either or both.

docker_build_run install

echo "OK ($(elapsed)s)"
