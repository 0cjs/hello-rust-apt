#!/usr/bin/env bash
set -Eeuo pipefail
trap '
    ec=$?
    echo 1>&2 "INTERNAL ERROR: ec=$ec line=$LINENO"
    echo 1>&2 "    file=$0"
    echo 1>&2 "    cmd=$BASH_COMMAND"
    exit $ec;
' ERR

elapsed_start=$(date +%s)

####################################################################
#   Utility functions

die()  { ec="$1"; shift; echo 1>&2 "ERROR ($ec):" "$@"; exit $ec; }
fail() { ec=$?; echo "FAILED exitcode=$ec ($(elapsed)s)"; exit $ec; }
elapsed() { echo $(( $(date +%s) - $elapsed_start )); }

setup_docker() {
    declare -g docker=docker
    if ! $docker --version; then
        die "Cannot run '$docker' command. Check path?"
    elif ! $docker info >/dev/null 2>&1; then
        docker='sudo docker'
        sudo -v -p 'sudo pw for %u@%h to run docker: ' \
            || die 3 "Cannot sudo to run '$docker'; start proxy?"
    fi
}

####################################################################
#   Build/run functions

docker_build_run() {
    declare -g quiet
    local prefix="$1"; shift
    local suffix="$1"; shift
    local btag="$prefix-$suffix"

    #   We assume that if the user is running Test, they want to rebuild
    #   the image (if necessary) and run a fresh container from it. This
    #   will destroy any existing sessions in the old container, ensuring
    #   we're starting clean.
    $docker container rm -f "$btag" >/dev/null 2>&1 || true

    local USER_ID="$(id -u)"
    local USER_NAME="$(id -u -n)"

    echo "----- Building image $btag"
    $docker buildx build ${clean_big:+--no-cache=true} $quiet \
        --build-arg=USER_UID="$USER_ID" --build-arg=USER_NAME="$USER_NAME" \
        --tag "$btag" --file "docker/Dockerfile.$suffix" docker/

    #   Make this container "persistent" by starting a background process
    #   that will simply continue running for a few hours; log in with
    #   `dent` or `docker exec`. (When the sleep expires, the developer can
    #   just re-run `Test` to start it again.)
    #
    #   Configuration notes:
    #   â€¢ We mount this entire repo read/write into the home dir of the
    #     user so we can build whatever parts of it we need.
    echo "----- Running container $btag"
    $docker run --name "$btag"\
        --rm=false --detach=true --tty=false \
        -v "$PROJDIR:/home/$USER_NAME/$(basename "$PROJDIR"):rw" \
        "$btag" /bin/sleep $((6*3600)) \
        >/dev/null  # We don't need to display the container ID.
}


####################################################################
#   Argument handling and setup

export PROJDIR=$(command cd "$(dirname "$0")" && pwd -P)
command cd "$PROJDIR"   # Makes life easier until we need to use file args.

clean_big=
clean_small=
quiet=-q
image_prefix=hra    # override with -i
while [[ ${#@} -gt 0 ]]; do case "$1" in
    -C)     shift; clean_big=true; rm -rf ".build/";;
    -c)     shift; clean_small=true; rm -rf .build/{cargo,docker,virtualenv};;
    -i)     shift; image_prefix="$1"; shift;;
    -v)     shift; quiet='';;
    --)     shift; break;;                  # remainder are ??? args?
    *)      break;;                         # guessing remainder are for pytest
esac; done
[[ $# -eq 0 ]] || die 2 "Invalid arg: $1"
setup_docker

####################################################################
#   build and test

source "$PROJDIR/pactivate" -q      # make `dent` available

docker_build_run "${image_prefix}" build
dent "${image_prefix}-build" bash -e -c "
    cd hello-rust-apt/
    #   This is required for the webhello/Cargo.toml symlink to work.
    mkdir -p .build/cargo/webhello/
    source docker/rustup-env
    cd webhello
    echo 'hello-rust-apt/webhello/: cargo build ' $quiet
    cargo build $quiet

    ../docker/make-package
"
dent "${image_prefix}-build" hello-rust-apt/webhello/test-hello-server

docker_build_run "${image_prefix}" install

echo "OK ($(elapsed)s)"
